package tetriscircuits.ui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import tetriscircuits.Component;
import tetriscircuits.Playfield;
import tetriscircuits.Point;
import tetriscircuits.Simulator;
import tetriscircuits.parser.Parser;

public class PlayfieldPanel extends javax.swing.JPanel {
    
    private static final Color BACKGROUND = new Color(0x2B2B2B);
    private static final Color GRID = new Color(0x555555);
    private static final Color AXISES = new Color(0xA9B7C6);
    
    private static final Color INPUT_FILL = new Color(0xC7D6E5);
    private static final Color OUTPUT_FILL = new Color(0x7F000000, true);
    
    private int cellSize = 32;
    private int playfieldWidth = 16;
    private int playfieldHeight = 16;
    private LockedTetriminoRenderer[] lockedTetriminoRenderers = {
        new LockedTetriminoRenderer(TetriminoRenderer.TD, 1, 0),
    };
    
    private Point[] inputs = new Point[0];
    private Point[][] outputs = new Point[0][0];
    
    private Dimension minimalSize = new Dimension(playfieldWidth * cellSize, playfieldHeight * cellSize);
    
    /**
     * Creates new form PlayfieldPanel
     */
    public PlayfieldPanel() {
        initComponents();
        
        
        final Map<String, Component> components = new HashMap<>();
        final Parser parser = new Parser();
        try {
            parser.parse(components, "circuits/components.txt");
        } catch (final Exception e) {
            e.printStackTrace();
        }
        for (final Component component : components.values()) {
            System.out.println(component);
        }

        final Playfield playfield = new Playfield(playfieldWidth, playfieldHeight, 1);
        final Simulator simulator = new Simulator();
        final Component component = components.get("or"); 
        
        this.outputs = component.getOutputs();
        
        final List<Point> inputPoints = new ArrayList<>();
        simulator.init(playfield, component, "00", (x, y) -> {
            inputPoints.add(new Point(x, y));
        });
        inputs = inputPoints.toArray(new Point[inputPoints.size()]);
        
        final List<LockedTetriminoRenderer> renderers = new ArrayList<>();        
        simulator.simulate(playfield, component, (tetrimino, x, y) -> {
            renderers.add(new LockedTetriminoRenderer(TetriminoRenderer.fromTetrimino(tetrimino), x, y));
        });                
        lockedTetriminoRenderers = renderers.toArray(new LockedTetriminoRenderer[renderers.size()]);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setMaximumSize(null);
        setMinimumSize(null);
        setPreferredSize(null);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    protected void paintComponent(final Graphics g) {
        
        final Dimension size = getSize();
        
        g.setColor(BACKGROUND);
        g.fillRect(0, 0, size.width, size.height);
                
        final int width = playfieldWidth * cellSize;
        final int height = playfieldHeight * cellSize;
        final int originY = size.height - 1 - height;
        final int originX = (size.width - width) >> 1;
        
        final int halfWidth = width >> 1;
        
        g.setColor(GRID);
        for (int i = 0, x = originX; i <= playfieldWidth; ++i, x += cellSize) {
            g.drawLine(x, originY, x, originY + height);
        }
        for (int i = 0, y = originY; i <= playfieldHeight; ++i, y += cellSize) {
            g.drawLine(originX, y, originX + width, y);
        }
        
        g.setColor(AXISES);
        final int middleX = originX + (playfieldWidth >> 1) * cellSize;
        g.drawLine(middleX, originY, middleX, originY + height - 1);
                
        for (int i = inputs.length - 1; i >= 0; --i) {
            final Point input = inputs[i];
            g.setColor(INPUT_FILL);
            g.fillRect(originX + input.x * cellSize, originY + input.y * cellSize, cellSize, cellSize);
        }
        
        for (int i = lockedTetriminoRenderers.length - 1; i >= 0; --i) {
            lockedTetriminoRenderers[i].render(g, originX, originY, cellSize);
        }
        
        for (int i = outputs.length - 1; i >= 0; --i) {
            final Point[] outs = outputs[i];
            for (int j = outs.length - 1; j >= 0; --j) {
                final Point output = outs[j];
                g.setColor(OUTPUT_FILL);
                g.fillRect(halfWidth + originX + output.x * cellSize, 
                        height + originY + (output.y - 1) * cellSize, cellSize, cellSize);
            }
        }
    }

    @Override
    public Dimension getMinimumSize() {
        return minimalSize;
    }    

    @Override
    public Dimension getPreferredSize() {
        return minimalSize;
    }
}