package tetriscircuits.ui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import tetriscircuits.Point;

public class PlayfieldPanel extends javax.swing.JPanel {
    
    private static final Color BACKGROUND = new Color(0x2B2B2B);
    private static final Color GRID = new Color(0x555555);
    private static final Color AXISES = new Color(0xA9B7C6);
    private static final Color CURSOR = new Color(0xFFFFFF);
    
    private static final Color INPUT_FILL = new Color(0xDDEEFF);
    private static final Color OUTPUT_FILL = new Color(0x7F000000, true);
    
    private int cellSize = 32;
    private int playfieldWidth = 32;
    private int playfieldHeight = 32;
    private LockedTetriminoRenderer[] lockedTetriminoRenderers = new LockedTetriminoRenderer[0];
    
    private Point[] inputs = new Point[0];
    private Point[] outputs = new Point[0];
    
    private Dimension minimalSize = new Dimension(playfieldWidth * cellSize, playfieldHeight * cellSize);
    
    private Integer lastCellX;
    private Integer lastCellY;
    
    private CircuitsFrame circuitsFrame;
    
    private LockedTetriminoRenderer[] cursorRenderers;
            
    private int cursorOriginX = 0;
    private int cursorOriginY = 0;
    private int cursorWidth = cellSize + 1;
    private int cursorHeight = cellSize + 1;
    
    /**
     * Creates new form PlayfieldPanel
     */
    public PlayfieldPanel() {
        initComponents();
    }
    
    public void setCursorRenderers(final LockedTetriminoRenderer[] cursorRenderers, final int originX, 
            final int originY, final int width, final int height) {
        
        this.cursorRenderers = cursorRenderers;
        cursorOriginX = cellSize * originX;
        cursorOriginY = cellSize * originY;
        cursorWidth = cellSize * width + 1;
        cursorHeight = cellSize * height + 1;
    }

    public void setCircuitsFrame(final CircuitsFrame circuitsFrame) {
        this.circuitsFrame = circuitsFrame;
        setCursor(circuitsFrame.getToolkit().createCustomCursor(
                new BufferedImage(3, 3, BufferedImage.TYPE_INT_ARGB), new java.awt.Point(0, 0),
                "null"));      
    }
    
    public void runCompleted(final Point[] ins, final Point[] outs, 
            final LockedTetriminoRenderer[] lockedTetriminoRenderers) {
        
        this.inputs = ins;
        this.outputs = outs;
        this.lockedTetriminoRenderers = lockedTetriminoRenderers;        
        repaint();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setMaximumSize(null);
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                formMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        
        final Dimension size = getSize();
        final int width = playfieldWidth * cellSize;
        final int height = playfieldHeight * cellSize;
        final int originY = size.height - 1 - height;
        final int originX = (size.width - width) >> 1;
        
        final int x = evt.getX();
        final int y = evt.getY();
        if (x >= originX && x < originX + width && y >= originY && y < originY + height) {
            final int cellX = (x - originX) / cellSize - (playfieldWidth >> 1);
            final int cellY = (playfieldHeight - 1) - (y - originY) / cellSize;
            if (lastCellX == null || cellX != lastCellX || cellY != lastCellY) { 
                if (lastCellX != null) {
                    repaint(cursorOriginX + originX + (lastCellX + (playfieldWidth >> 1)) * cellSize,
                            cursorOriginY + originY - (lastCellY - playfieldHeight + 1) * cellSize, 
                            cursorWidth, cursorHeight);
                }
                lastCellX = cellX;
                lastCellY = cellY;
                repaint(cursorOriginX + originX + (lastCellX + (playfieldWidth >> 1)) * cellSize,
                            cursorOriginY + originY - (lastCellY - playfieldHeight + 1) * cellSize, 
                            cursorWidth, cursorHeight);
                circuitsFrame.getCoordinatesLabel().setText(String.format("%d:%d", lastCellX, lastCellY));
            }
        } else {
            if (lastCellX != null) {
                repaint(cursorOriginX + originX + (lastCellX + (playfieldWidth >> 1)) * cellSize,
                        cursorOriginY + originY - (lastCellY - playfieldHeight + 1) * cellSize, 
                        cursorWidth, cursorHeight);
            }
            lastCellX = lastCellY = null;
            circuitsFrame.getCoordinatesLabel().setText("");
        }
    }//GEN-LAST:event_formMouseMoved

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_formMousePressed

    private void formMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseEntered
        formMouseMoved(evt);
    }//GEN-LAST:event_formMouseEntered

    private void formMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseExited
        
        if (lastCellX == null) {
            return;
        }
        
        final Dimension size = getSize();
        final int width = playfieldWidth * cellSize;
        final int height = playfieldHeight * cellSize;
        final int originY = size.height - 1 - height;
        final int originX = (size.width - width) >> 1;
        repaint(cursorOriginX + originX + (lastCellX + (playfieldWidth >> 1)) * cellSize,
                cursorOriginY + originY - (lastCellY - playfieldHeight + 1) * cellSize, 
                cursorWidth, cursorHeight);
        lastCellX = lastCellY = null;
        circuitsFrame.getCoordinatesLabel().setText("");
    }//GEN-LAST:event_formMouseExited

    private void formMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseDragged
        formMouseMoved(evt);
    }//GEN-LAST:event_formMouseDragged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    protected void paintComponent(final Graphics g) {
        
        final Dimension size = getSize();
        
        g.setColor(BACKGROUND);
        g.fillRect(0, 0, size.width, size.height);
                
        final int width = playfieldWidth * cellSize;
        final int height = playfieldHeight * cellSize;
        final int originX = (size.width - width) >> 1;
        final int originY = size.height - 1 - height;        
        final int centerX = originX + (width >> 1);
        final int centerY = originY + height - cellSize;
        
        g.setColor(GRID);
        for (int i = 0, x = originX; i <= playfieldWidth; ++i, x += cellSize) {
            g.drawLine(x, originY, x, originY + height);
        }
        for (int i = 0, y = originY; i <= playfieldHeight; ++i, y += cellSize) {
            g.drawLine(originX, y, originX + width, y);
        }
        
        g.setColor(AXISES);
        final int middleX = originX + (playfieldWidth >> 1) * cellSize;
        g.drawLine(middleX, originY, middleX, originY + height - 1);
                
        for (int i = inputs.length - 1; i >= 0; --i) {
            final Point input = inputs[i];
            g.setColor(INPUT_FILL);
            g.fillRect(centerX + input.x * cellSize, centerY - input.y * cellSize, cellSize, cellSize);
        }
        
        for (int i = lockedTetriminoRenderers.length - 1; i >= 0; --i) {
            lockedTetriminoRenderers[i].render(g, centerX, centerY, cellSize);
        }
        
        for (int i = outputs.length - 1; i >= 0; --i) {
            final Point output = outputs[i];
            g.setColor(OUTPUT_FILL);
            g.fillRect(centerX + output.x * cellSize, centerY - output.y * cellSize, cellSize, cellSize);
        }
        
        if (lastCellX != null) {            
            if (cursorRenderers == null) {            
                g.setColor(CURSOR);
                g.drawRect(originX + (lastCellX + (playfieldWidth >> 1)) * cellSize,
                        originY - (lastCellY - playfieldHeight + 1) * cellSize, cellSize, cellSize);
            } else {
                final int ox = originX + (lastCellX + (playfieldWidth >> 1)) * cellSize;
                final int oy = originY - (lastCellY - playfieldHeight + 1) * cellSize;
                for (int i = cursorRenderers.length - 1; i >= 0; --i) {
                    cursorRenderers[i].render(g, ox, oy, cellSize);
                }
            }
        }
    }

    @Override
    public Dimension getMinimumSize() {
        return minimalSize;
    }    

    @Override
    public Dimension getPreferredSize() {
        return minimalSize;
    }
}