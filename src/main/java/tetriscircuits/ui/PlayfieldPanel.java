package tetriscircuits.ui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import tetriscircuits.Component;
import tetriscircuits.Playfield;
import tetriscircuits.Point;
import tetriscircuits.Simulator;
import tetriscircuits.parser.Parser;

public class PlayfieldPanel extends javax.swing.JPanel {
    
    private static final Color BACKGROUND = new Color(0x2B2B2B);
    private static final Color GRID = new Color(0x555555);
    private static final Color AXISES = new Color(0xA9B7C6);
    private static final Color CURSOR = new Color(0xFFFFFF);
    
    private static final Color INPUT_FILL = new Color(0xDDEEFF);
    private static final Color OUTPUT_FILL = new Color(0x7F000000, true);
    
    private int cellSize = 32;
    private int playfieldWidth = 16;
    private int playfieldHeight = 16;
    private LockedTetriminoRenderer[] lockedTetriminoRenderers = {
        new LockedTetriminoRenderer(TetriminoRenderer.TD, 1, 0),
    };
    
    private Point[] inputs = new Point[0];
    private Point[][] outputs = new Point[0][0];
    
    private Dimension minimalSize = new Dimension(playfieldWidth * cellSize, playfieldHeight * cellSize);
    
    private Integer lastCellX;
    private Integer lastCellY;
    
    private CircuitsFrame circuitsFrame;
    
    /**
     * Creates new form PlayfieldPanel
     */
    public PlayfieldPanel() {
        initComponents();
        
        
        final Map<String, Component> components = new LinkedHashMap<>();
        final Parser parser = new Parser();
        try {
            parser.parse(components, "circuits/components.txt");
        } catch (final Exception e) {
            e.printStackTrace(); // TODO REMOVE
        }
        for (final Component component : components.values()) {
            System.out.println(component);
        }

        final Playfield playfield = new Playfield(playfieldWidth, playfieldHeight, 1);
        final Simulator simulator = new Simulator();
        final Component component = components.get("nand"); 
        
        if (component != null) {
            this.outputs = component.getOutputs();

            final List<Point> inputPoints = new ArrayList<>();
            simulator.init(playfield, component, "11", (x, y) -> {
                inputPoints.add(new Point(x, y));
            });
            inputs = inputPoints.toArray(new Point[inputPoints.size()]);

            final List<LockedTetriminoRenderer> renderers = new ArrayList<>();        
            simulator.simulate(playfield, component, (tetrimino, x, y) -> {
                renderers.add(new LockedTetriminoRenderer(TetriminoRenderer.fromTetrimino(tetrimino), x, y));
            });                
            lockedTetriminoRenderers = renderers.toArray(new LockedTetriminoRenderer[renderers.size()]);
        }
    }

    public void setCircuitsFrame(final CircuitsFrame circuitsFrame) {
        this.circuitsFrame = circuitsFrame;
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setMaximumSize(null);
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                formMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                formMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseMoved
        
        final Dimension size = getSize();
        final int width = playfieldWidth * cellSize;
        final int height = playfieldHeight * cellSize;
        final int originY = size.height - 1 - height;
        final int originX = (size.width - width) >> 1;
        
        final int x = evt.getX();
        final int y = evt.getY();
        if (x >= originX && x < originX + width && y >= originY && y < originY + height) {
            final int cellX = (x - originX) / cellSize - (playfieldWidth >> 1);
            final int cellY = (playfieldHeight - 1) - (y - originY) / cellSize;
            if (lastCellX == null || cellX != lastCellX || cellY != lastCellY) { 
                if (lastCellX != null) {
                    repaint(originX + (lastCellX + (playfieldWidth >> 1)) * cellSize,
                            originY - (lastCellY - playfieldHeight + 1) * cellSize, cellSize + 1, cellSize + 1);
                }
                lastCellX = cellX;
                lastCellY = cellY;
                repaint(originX + (lastCellX + (playfieldWidth >> 1)) * cellSize,
                        originY - (lastCellY - playfieldHeight + 1) * cellSize, cellSize + 1, cellSize + 1);
                circuitsFrame.getCoordinatesLabel().setText(String.format("%d:%d", lastCellX, lastCellY));
            }
        } else {
            if (lastCellX != null) {
                repaint(originX + (lastCellX + (playfieldWidth >> 1)) * cellSize,
                        originY - (lastCellY - playfieldHeight + 1) * cellSize, cellSize + 1, cellSize + 1);
            }
            lastCellX = lastCellY = null;
            circuitsFrame.getCoordinatesLabel().setText("");
        }
    }//GEN-LAST:event_formMouseMoved

    private void formMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_formMousePressed

    private void formMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseEntered
        formMouseMoved(evt);
    }//GEN-LAST:event_formMouseEntered

    private void formMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseExited
        
        if (lastCellX == null) {
            return;
        }
        
        final Dimension size = getSize();
        final int width = playfieldWidth * cellSize;
        final int height = playfieldHeight * cellSize;
        final int originY = size.height - 1 - height;
        final int originX = (size.width - width) >> 1;
        repaint(originX + (lastCellX + (playfieldWidth >> 1)) * cellSize,
                        originY - (lastCellY - playfieldHeight + 1) * cellSize, cellSize + 1, cellSize + 1);
        lastCellX = lastCellY = null;
        circuitsFrame.getCoordinatesLabel().setText("");
    }//GEN-LAST:event_formMouseExited

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    protected void paintComponent(final Graphics g) {
        
        final Dimension size = getSize();
        
        g.setColor(BACKGROUND);
        g.fillRect(0, 0, size.width, size.height);
                
        final int width = playfieldWidth * cellSize;
        final int height = playfieldHeight * cellSize;
        final int originY = size.height - 1 - height;
        final int originX = (size.width - width) >> 1;
        
        final int halfWidth = width >> 1;
        
        g.setColor(GRID);
        for (int i = 0, x = originX; i <= playfieldWidth; ++i, x += cellSize) {
            g.drawLine(x, originY, x, originY + height);
        }
        for (int i = 0, y = originY; i <= playfieldHeight; ++i, y += cellSize) {
            g.drawLine(originX, y, originX + width, y);
        }
        
        g.setColor(AXISES);
        final int middleX = originX + (playfieldWidth >> 1) * cellSize;
        g.drawLine(middleX, originY, middleX, originY + height - 1);
                
        for (int i = inputs.length - 1; i >= 0; --i) {
            final Point input = inputs[i];
            g.setColor(INPUT_FILL);
            g.fillRect(originX + input.x * cellSize, originY + input.y * cellSize, cellSize, cellSize);
        }
        
        for (int i = lockedTetriminoRenderers.length - 1; i >= 0; --i) {
            lockedTetriminoRenderers[i].render(g, originX, originY, cellSize);
        }
        
        for (int i = outputs.length - 1; i >= 0; --i) {
            final Point[] outs = outputs[i];
            for (int j = outs.length - 1; j >= 0; --j) {
                final Point output = outs[j];
                g.setColor(OUTPUT_FILL);
                g.fillRect(halfWidth + originX + output.x * cellSize, 
                        height + originY + (-output.y - 1) * cellSize, cellSize, cellSize);
            }
        }
        
        if (lastCellX != null) {
            g.setColor(CURSOR);
            g.drawRect(originX + (lastCellX + (playfieldWidth >> 1)) * cellSize,
                    originY - (lastCellY - playfieldHeight + 1) * cellSize, cellSize, cellSize);
        }
    }

    @Override
    public Dimension getMinimumSize() {
        return minimalSize;
    }    

    @Override
    public Dimension getPreferredSize() {
        return minimalSize;
    }
}