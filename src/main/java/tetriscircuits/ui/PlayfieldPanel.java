package tetriscircuits.ui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;

public class PlayfieldPanel extends javax.swing.JPanel {
    
    private static final Color BACKGROUND = new Color(0x2B2B2B);
    private static final Color GRID = new Color(0x555555);
    private static final Color AXISES = new Color(0xA9B7C6);
    
    private int cellSize = 16;
    private int playfieldWidth = 64;
    private int playfieldHeight = 64;
    private LockedTetriminoRenderer[] lockedTetriminoRenderers = {
        new LockedTetriminoRenderer(TetriminoRenderer.TD, 1, 0),
    };
    
    private Dimension minimalSize = new Dimension(playfieldWidth * cellSize, playfieldHeight * cellSize);
    
    /**
     * Creates new form PlayfieldPanel
     */
    public PlayfieldPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setMaximumSize(null);
        setMinimumSize(null);
        setPreferredSize(null);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    protected void paintComponent(final Graphics g) {
        
        final Dimension size = getSize();
        
        g.setColor(BACKGROUND);
        g.fillRect(0, 0, size.width, size.height);
                
        final int width = playfieldWidth * cellSize;
        final int height = playfieldHeight * cellSize;
        final int originY = size.height - 1 - height;
        final int originX = (size.width - width) >> 1;
        
        g.setColor(GRID);
        for (int i = 0, x = originX; i <= playfieldWidth; ++i, x += cellSize) {
            g.drawLine(x, originY, x, originY + height);
        }
        for (int i = 0, y = originY; i <= playfieldHeight; ++i, y += cellSize) {
            g.drawLine(originX, y, originX + width, y);
        }
        
        g.setColor(AXISES);
        final int middleX = originX + (playfieldWidth >> 1) * cellSize;
        g.drawLine(middleX, originY, middleX, originY + height);
        
        for (int i = 0; i < lockedTetriminoRenderers.length; ++i) {
            lockedTetriminoRenderers[i].render(g, originX, originY, cellSize);
        }
    }

    @Override
    public Dimension getMinimumSize() {
        return minimalSize;
    }    

    @Override
    public Dimension getPreferredSize() {
        return minimalSize;
    }
}