package tetriscircuits.computer.ui;

import static java.awt.EventQueue.invokeAndWait;
import static java.awt.EventQueue.isDispatchThread;
import java.awt.event.KeyEvent;
import tetriscircuits.ui.UiUtil;

public class PlayfieldFrame extends javax.swing.JFrame {

    private static final int LEFT_KEY_CODE = KeyEvent.VK_LEFT;
    private static final int RIGHT_KEY_CODE = KeyEvent.VK_RIGHT;
    private static final int START_KEY_CODE = KeyEvent.VK_ENTER;
    
    private final PlayfieldPanel playfieldPanel = new PlayfieldPanel();

    private boolean left;
    private boolean right;
    private boolean rotate;
    private boolean start;
    
    private int leftAsserted;
    private int rightAsserted;
    private int rotateAsserted;
    private int startAsserted;
    
    private boolean lastRotate;
    private boolean lastStart;
  
    
    /**
     * Creates new form PlayfieldFrame
     */
    public PlayfieldFrame() {
        initComponents();
        UiUtil.setIcons(this);
        setContentPane(playfieldPanel);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tetris running on Tetris");
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        switch (evt.getKeyCode()) {
            case LEFT_KEY_CODE:
                left = true;
                if (leftAsserted == 0) {
                    leftAsserted = 1;
                }
                break;
            case RIGHT_KEY_CODE:                
                right = true;
                if (rightAsserted == 0) {
                    rightAsserted = 1;
                }
                break;
            case START_KEY_CODE:
                start = true;
                if (startAsserted == 0) {
                    startAsserted = 1;
                }
                break;
            default:                
                rotate = true;
                if (rotateAsserted == 0) {
                    rotateAsserted = 1;
                }
                break;    
        }
    }//GEN-LAST:event_formKeyPressed

    private void formKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyReleased
        switch (evt.getKeyCode()) {
            case LEFT_KEY_CODE:                
                left = false;
                if (leftAsserted == 2) {
                    leftAsserted = 0;
                }
                break;
            case RIGHT_KEY_CODE:
                right = false;
                if (rightAsserted == 2) {
                    rightAsserted = 0;
                }
                break;
            case START_KEY_CODE:
                start = false;
                if (startAsserted == 2) {
                    startAsserted = 0;
                }
                break;                
            default:
                rotate = false;
                if (rotateAsserted == 2) {
                    rotateAsserted = 0;
                }
                break;
        }
    }//GEN-LAST:event_formKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    public void update(final PlayfieldModel playfieldModel) {
        if (!isDispatchThread()) {
            try {
                invokeAndWait(() -> update(playfieldModel));
            } catch (final Exception e) {                
            }
            return;
        }
        
        playfieldModel.setLeftPressed(left || leftAsserted == 1);
        if (leftAsserted == 1) {
            leftAsserted = left ? 2 : 0;
        }
        
        playfieldModel.setRightPressed(right || rightAsserted == 1);
        if (rightAsserted == 1) {
            rightAsserted = right ? 2 : 0;
        }
        
        playfieldModel.setRotatePressed((rotate || rotateAsserted == 1) && !lastRotate);
        lastRotate = rotate || rotateAsserted == 1;
        if (rotateAsserted == 1) {
            rotateAsserted = rotate ? 2 : 0;
        }
        
        playfieldModel.setStartPressed((start || startAsserted == 1) && !lastStart);
        lastStart = start || startAsserted == 1;
        if (startAsserted == 1) {
            startAsserted = start ? 2 : 0;
        }
        
        playfieldPanel.update(playfieldModel);
    }
}
