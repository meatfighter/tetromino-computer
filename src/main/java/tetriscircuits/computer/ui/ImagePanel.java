package tetriscircuits.computer.ui;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.image.BufferedImage;

public class ImagePanel extends javax.swing.JPanel {
    
    private static final int PLAYFIELD_WIDTH = 10;
    private static final int PLAYFIELD_HEIGHT = 20;
    private static final int CELL_SIZE = 32;
    
    private static final int PREFERRED_WIDTH = CELL_SIZE * PLAYFIELD_WIDTH;
    private static final int PREFERRED_HEIGHT = CELL_SIZE * PLAYFIELD_HEIGHT;
    private static final Dimension PREFERRED_SIZE = new Dimension(PREFERRED_WIDTH, PREFERRED_HEIGHT);

    private final BufferedImage image = new BufferedImage(PLAYFIELD_WIDTH, PLAYFIELD_HEIGHT, 
            BufferedImage.TYPE_INT_RGB);
    
    public ImagePanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    protected void paintComponent(final Graphics g) {
        final Dimension size = getSize();
        int imageX = 0;
        int imageY = 0;
        int imageWidth = PREFERRED_WIDTH;
        int imageHeight = PREFERRED_HEIGHT;        
        if (size.width > size.height) {
            imageHeight = size.height;
            imageX = (size.width - imageSize) >> 1;
            g.setColor(Color.BLACK);
            g.fillRect(0, 0, imageX, size.height);
            g.fillRect(imageX + imageSize, 0, size.width - imageX - imageSize, size.height);
        } else if (size.height > size.width) {
            imageWidth = size.width;
            imageY = (size.height - imageSize) >> 1;
            g.setColor(Color.BLACK);
            g.fillRect(0, 0, size.width, imageY);
            g.fillRect(0, imageY + imageSize, size.width, size.height - imageY - imageSize);
        }
        g.drawImage(image, imageX, imageY, imageWidth, imageHeight, null);
    }

    @Override
    public Dimension getPreferredSize() {
        return PREFERRED_SIZE;
    }
}
