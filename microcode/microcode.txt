; descend
DEC_16 13               ; --a;
SWAP 2                  ; swap K upward
SWAP 3                  ; swap K upward
SWAP 4                  ; swap K upward
SWAP 5                  ; swap K upward
SWAP 6                  ; swap K upward
SWAP 7                  ; swap K upward
SWAP 8                  ; swap K upward
SWAP 9                  ; swap K upward
SWAP 10                 ; swap K upward
SWAP 11                 ; swap K upward
SWAP 12                 ; swap K upward
SWAP 13                 ; swap K upward
SWAP 14                 ; swap K upward
SWAP 15                 ; swap K upward
SWAP 16                 ; swap K upward
SWAP 17                 ; swap K upward
SWAP 18                 ; swap K upward
SWAP 19                 ; swap K upward
SWAP 20                 ; swap K upward
SWAP 21                 ; swap K upward
SWAP 22                 ; swap K upward


; ascend
INC_16 13               ; ++a;
SWAP 23                 ; swap Q downward
SWAP 22                 ; swap Q downward
SWAP 21                 ; swap Q downward
SWAP 20                 ; swap Q downward
SWAP 19                 ; swap Q downward
SWAP 18                 ; swap Q downward
SWAP 17                 ; swap Q downward
SWAP 16                 ; swap Q downward
SWAP 15                 ; swap Q downward
SWAP 14                 ; swap Q downward
SWAP 13                 ; swap Q downward
SWAP 12                 ; swap Q downward
SWAP 11                 ; swap Q downward
SWAP 10                 ; swap Q downward
SWAP 9                  ; swap Q downward
SWAP 8                  ; swap Q downward
SWAP 7                  ; swap Q downward
SWAP 6                  ; swap Q downward
SWAP 5                  ; swap Q downward
SWAP 4                  ; swap Q downward
SWAP 3                  ; swap Q downward


; fetch
CMP_C 9                 ; s1 = (P1 == a1);
CMP_AND_C 10            ; s1 &= (P0 == a0);
COPY_A_B_C 2            ; if (s1) i = I;
COPY_A_B_C 3            ; if (s1) j = J;
COPY_A_B_C 4            ; if (s1) k = K;


; load/store phase 2
CMP_C 12                ; s0 = (M == a1);
CMP_AND_C 14            ; s0 &= (N == a0);
COPY_B_A 11             ; s1 = s0;
AND_AB_AF 8             ; s1 &= r;
COPY_A_B_C 5            ; if (s1) m = I;
COPY_B_A 11             ; s1 = s0;
AND_AB_AF 7             ; s1 &= w;
COPY_B_A_C 5            ; if (s1) I = m;


; load phase 3
MINUS_C 11              ; s0 = (m < 0);
C_COPY_A_B 16           ; if (r) n = s0;
ZERO_C 16               ; s0 = (m == 0);
C_COPY_A_B 17           ; if (r) z = s0;
C_AND_A_NOT_B 16        ; s0 = r & !d;
C_COPY_A_B 18           ; if (s0) A = m;
AND_A_B_C 15            ; s0 = r & d;
C_COPY_A_B 19           ; if (s0) B = m;


; increment P
INC_16 8                ; ++P;
SEX_C 12                ; s1 = (i is a 2-byte instruction);
INC_16_C 8              ; if (s1) ++P;
THREE_C 12              ; s1 = (i is a 3-byte instruction);
INC_16_C 8              ; if (s1) ++P;
INC_16_C 8              ; if (s1) ++P;


; transfer instructions
TMX_C 12                ; s1 = (i matches TM*);
C_COPY_A_B 13           ; if (s1) s0 = M;
TNX_C 13                ; s1 = (i matches TN*);
C_COPY_A_B 14           ; if (s1) s0 = N;
TAX_C 17                ; s1 = (i matches TA*);
C_COPY_A_B 18           ; if (s1) s0 = A;
TBX_C 18                ; s1 = (i matches TB*);
C_COPY_A_B 19           ; if (s1) s0 = B;

TXB_C 18                ; s1 = (i matches T*B);
C_COPY_B_A 19           ; if (s1) B = s0;
TXA_C 17                ; s1 = (i matches T*A);
C_COPY_B_A 18           ; if (s1) A = s0;
TXN_C 13                ; s1 = (i matches T*N);
C_COPY_B_A 14           ; if (s1) N = s0;
TXM_C 12                ; s1 = (i matches T*M);
C_COPY_B_A 13           ; if (s1) M = s0;


; arithmetic and logic instructions
CLEAR 14                ; d = 0;
        
ADD_C 12                ; s1 = (i is ADD);
OR_AB_FB 13             ; d |= s1;
COPY_B_A 15             ; s0 = A;
ADD_AB_FB 16            ; s0 += B;
C_COPY_A_B 14           ; if (s1) A = s0;
        
AND_C 12                ; s1 = (i is AND);
OR_AB_FB 13             ; d |= s1;
COPY_B_A 15             ; s0 = A;
AND_AB_FB 16            ; s0 &= B;
C_COPY_A_B 14           ; if (s1) A = s0;
        
DEC_C 12                ; s1 = (i is DEC);
OR_AB_FB 13             ; d |= s1;
COPY_B_A 15             ; s0 = A;
DEC 15                  ; --s0;
C_COPY_A_B 14           ; if (s1) A = s0;

INC_C 12                ; s1 = (i is INC);
OR_AB_FB 13             ; d |= s1;
COPY_B_A 15             ; s0 = A;
INC 15                  ; ++s0;
C_COPY_A_B 14           ; if (s1) A = s0;

LS2_C 12                ; s1 = (i is LS2);
OR_AB_FB 13             ; d |= s1;
COPY_B_A 15             ; s0 = A;
LS2 15                  ; s0 <<= 2;
C_COPY_A_B 14           ; if (s1) A = s0;
        
LS3_C 12                ; s1 = (i is LS3);
OR_AB_FB 13             ; d |= s1;
COPY_B_A 15             ; s0 = A;
LS3 15                  ; s0 <<= 3;
C_COPY_A_B 14           ; if (s1) A = s0;

LS4_C 12                ; s1 = (i is LS4);
OR_AB_FB 13             ; d |= s1;
COPY_B_A 15             ; s0 = A;
LS4 15                  ; s0 <<= 4;
C_COPY_A_B 14           ; if (s1) A = s0;

OR_C 12                 ; s1 = (i is OR);
OR_AB_FB 13             ; d |= s1;
COPY_B_A 15             ; s0 = A;
OR_AB_FB 16             ; s0 |= B;
C_COPY_A_B 14           ; if (s1) A = s0;

RS1_C 12                ; s1 = (i is RS1);
OR_AB_FB 13             ; d |= s1;
COPY_B_A 15             ; s0 = A;
RS1 15                  ; s0 >>= 1;
C_COPY_A_B 14           ; if (s1) A = s0;
        
RS5_C 12                ; s1 = (i is RS5);
OR_AB_FB 13             ; d |= s1;
COPY_B_A 15             ; s0 = A;
RS5 15                  ; s0 >>= 5;
C_COPY_A_B 14           ; if (s1) A = s0;

SUB_C 12                ; s1 = (i is SUB);
OR_AB_FB 13             ; d |= s1;
COPY_B_A 15             ; s0 = A;
SUB_AB_FB 16            ; s0 -= B;
C_COPY_A_B 14           ; if (s1) A = s0;

XOR_C 12                ; s1 = (i is XOR);
OR_AB_FB 13             ; d |= s1;
COPY_B_A 15             ; s0 = A;
XOR_AB_FB 16            ; s0 ^= B;
C_COPY_A_B 14           ; if (s1) A = s0;
        
CLEAR 15                ; s0 = 0; // required by C_MINUS      
C_MINUS 15              ; s0 = (A < 0);
C_COPY_A_B 14           ; if (d) n = s0;
C_ZERO 15               ; s0 = (A == 0);
C_COPY_A_B 14           ; if (d) z = s0;


; set instructions
SEA_C 12                ; s1 = (i is SEA);
C_COPY_A_B 12           ; if (s1) A = j;
SEB_C 11                ; s1 = (i is SEB);
C_COPY_A_B 12           ; if (s1) B = j;     
SMN_C 11                ; s1 = (i is SMN);
C_COPY_A_B 12           ; if (s1) M = j;               
C_COPY_A_B 11           ; if (s1) N = k;


; branch instructions  
JMP_C 9                 ; s1 = (i is JMP);
C_COPY_A_B 10           ; if (s1) P0 = k;
C_COPY_A_B 9            ; if (s1) P1 = j;

BEQ_C 8                 ; s1 = (i is BEQ);
AND_AB_FB 9             ; s1 &= z;
C_COPY_A_B 9            ; if (s1) P1 = j;
C_COPY_A_B 12           ; if (s1) P0 = k;

BNE_C 8                 ; s1 = (i is BNE);
AND_NOT_AB_FB 9         ; s1 &= !z;
C_COPY_A_B 9            ; if (s1) P1 = j;
C_COPY_A_B 12           ; if (s1) P0 = k;

BMI_C 8                 ; s1 = (i is BMI);
AND_AB_FB 9             ; s1 &= n;
C_COPY_A_B 9            ; if (s1) P1 = j;
C_COPY_A_B 12           ; if (s1) P0 = k;

BPL_C 8                 ; s1 = (i is BPL);
AND_NOT_AB_FB 9         ; s1 &= !n;
C_COPY_A_B 9            ; if (s1) P1 = j;
C_COPY_A_B 12           ; if (s1) P0 = k;

JSR_C 8                 ; s1 = (i is JSR);       
C_COPY_A_B 13           ; if (s1) R0 = P0;
C_COPY_A_B 12           ; if (s1) P0 = k;
C_COPY_A_B 10           ; if (s1) R1 = P1;
C_COPY_A_B 9            ; if (s1) P1 = j;

RTS_C 8                 ; s1 = (i is RTS); 
C_COPY_B_A 10           ; if (s1) P1 = R1;
C_COPY_B_A 13           ; if (s1) P0 = R0;


; load/store phase 1
STB_C 11                ; s1 = (i is STB);
C_COPY_B_A 12           ; if (s1) m = B;
        
STA_C 11                ; s1 = (i is STA);
C_COPY_B_A 12           ; if (s1) m = A;

LDB_C 12                ; d = (i is LDB);
LDX_C 7                 ; r = (i matches LD*);
STX_C 6                 ; w = (i matches ST*);  