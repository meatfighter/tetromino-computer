# notLeft alias
def not
    notLeft 0 0
    in 0 0
    out 0 1
    test 0 1
    test 1 0

# not with square on left and single tap right
def notLeft
    o -1 1 0
    in 0 0
    out 0 1
    test 0 1
    test 1 0
      
# not with square on left and double tap right
def notLeft2
    o -1 1 1
    in 0 0
    out 0 1
    test 0 1
    test 1 0
    
# not with square on right and single tap left
def notRight
    o 2 1 1
    in 0 0
    out 0 1
    test 0 1
    test 1 0
    
# not with square on right and double tap left
def notRight2
    o 2 1 0
    in 0 0
    out 0 1
    test 0 1
    test 1 0
    
def or
    o 0
    in -1 0 
    in 0 0
    out -1..0 2
    test 00 0
    test 01 1
    test 10 1
    test 11 1
    
# alias of norLeft
def nor
    norLeft 0 0
    in -1 0 
    in 0 0
    out -1..0 3
    test 00 1
    test 01 0
    test 10 0
    test 11 0

# nor with square on left
def norLeft
    or 0 0
    notLeft2 -1 2
    in -1 0 
    in 0 0
    out -1..0 3
    test 00 1
    test 01 0
    test 10 0
    test 11 0
    
    
# nor with square on right
def norRight
    or 0 0
    notRight2 0 2
    in -1 0 
    in 0 0
    out -1..0 3
    test 00 1
    test 01 0
    test 10 0
    test 11 0
    
    
def nand
    notLeft -1 0
    notRight 0 0
    or 0 1
    in -1 0
    in 0 0
    out -1..0 3
    test 00 1
    test 01 1
    test 10 1
    test 11 0

# andLeft alias
def and
    andLeft 0 0
    in -1 0
    in 0 0
    out -1..0 4
    test 00 0
    test 01 0
    test 10 0
    test 11 1 
    
# and with square on left
def andLeft
    nand 0 0
    notLeft2 -1 3
    in -1 0
    in 0 0
    out -1..0 4    
    test 00 0
    test 01 0
    test 10 0
    test 11 1    

# and with square on right
def andRight
    nand 0 0
    notRight2 0 3
    in -1 0
    in 0 0
    out -1..0 4    
    test 00 0
    test 01 0
    test 10 0
    test 11 1
    
def xor
    ih -2
    ih 2
    iv -4
    iv 3
    nor 0 1
    lu -2
    ju 1
    norLeft -3 5
    norRight 3 5
    ih -2
    ih 2
    or 0 9
    in -4..-1 0
    in 0..3 0
    out -1..0 11
    test 00 0
    test 01 1
    test 10 1
    test 00 0
    
def xnor
    xor 0 0
    notLeft2 -1 11    
    in -4..-1 0
    in 0..3 0
    out -1..0 12
    test 00 1
    test 01 0
    test 10 0
    test 11 1

def swap
    ih -2
    ih 2
    ll -4
    jr 3
    ih -5
    ih 5
    nor 0 1
    lu -2
    ju 1
    norLeft -3 5
    norRight 3 5
    ih -2
    ih 2
    or 0 8
    iv -7
    iv 6 7
    iv -7
    iv 6
    jd -2
    ld 1
    xor -6 13
    xor 6 13    
    in -4..-1 0
    in 0..3 0
    out -7..-6 24
    out 5..6 24
    test 00 00
    test 01 10
    test 10 01
    test 11 11

# (left, select left, right)
def muxLeft
    td 0
    notRight 1 2
    ld -1
    lu 2
    ju -1
    o -3
    o 5
    jl -3
    lr 4
    and -2 5
    and 4 5
    ju 2
    lu -1 10
    or 1 11
    in -4 0
    in 0 0
    in 5 0
    out 0..1 13

# (left, select right, right)
def muxRight
    td 0
    not -1 2
    jd 1
    ju -2
    lu 1
    o 4
    o -4
    lr 3
    jl -4
    and -3 5
    and 3 5
    lu -2
    ju 1
    or 0 11    
    in -5 0
    in 0 0
    in 4 0
    out -1..0 13

def adder
    ih -2
    ih 2
    ju 2
    nor 0 1
    ih -5
    ll -7
    iv -8
    iv -8
    iv -8
    iv -4
    iv 3
    jd -2
    ld 1
    norLeft -3 6
    norRight 3 6
    ih -2
    ih 2
    nor 0 10
    ih -1
    iv 6
    iv 6
    iv 6
    ih 5
    ih 3
    nor 1 14
    ih -4
    ju 3
    ld 2
    jd -1
    iv -3
    iv 4
    norRight 4 19
    norLeft -2 19
    ih -1
    ih 3
    norRight 1 23
    iv -6
    o -7
    iv -7 
    iv -6 
    norRight -6 23        
    
    in -4..-1 0
    in 0..3 0
    in 6 0
    out -7..-6 26
    out 0..1 26